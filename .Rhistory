geom_col(width=1, color="white") +
coord_polar(theta = "y") +
scale_fill_manual(values=af_categorical_colours) +
geom_text(aes(label = Label, x=1.7),
position = position_stack(vjust = 0.5)) +
theme(text = element_text(size=10),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_text(size = 15),
legend.position = "none", # Removes the legend
panel.background = element_rect(fill = "white"))
#| echo: false
#| warning: false
#Load your packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
#Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
#Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
mutate(Label = paste(Continent,
paste(round(((Population/sum(Population))*100), 2), "%"),
sep=" "))
Create your chart
#| echo: false
#| warning: false
#Load your packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
#Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
#Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
mutate(Label = paste(Continent,
paste(round(((Population/sum(Population))*100), 2), "%"),
sep=" "))
#Create your chart
ggplot(continents_population, aes(x="", y=Population, fill=Continent)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_manual(values=af_categorical_colours) +
scale_y_continuous(breaks=cumsum(continents_population$Population)
- continents_population$Population / 2,
labels= continents_population$Continent) +
theme(axis.ticks=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_text(colour='black'),
axis.title=element_blank())
#| echo: false
#| warning: false
#Load your packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
#Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
#Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
mutate(Label = paste(Continent,
paste(round(((Population/sum(Population))*100), 2), "%"),
sep=" "))
#Create your chart
ggplot(continents_population, aes(x="", y=Population, fill=Continent)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_manual(values=af_categorical_colours) +
theme(axis.ticks=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_text(colour='black'),
axis.title=element_blank())
#| echo: false
#| warning: false
#Load your packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
#Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
#Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
mutate(Label = paste(Continent,
paste(round(((Population/sum(Population))*100), 2), "%"),
sep=" "))
#Create your chart
ggplot(continents_population, aes(x="", y=Population, fill=Continent)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_manual(values=af_categorical_colours) +
theme_void()
#| echo: false
#| warning: false
#Load your packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
#Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
#Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
mutate(Label = paste(Continent,
paste(round(((Population/sum(Population))*100), 2), "%"),
sep=" "))
#Create your chart
# ggplot(continents_population, aes(x="", y=Population, fill=Continent)) +
#   geom_bar(stat="identity", width=1, color="white") +
#   coord_polar("y", start=0) +
#   scale_fill_manual(values=af_categorical_colours) +
#   scale_y_continuous(breaks=cumsum(continents_population$Population)
#                      - continents_population$Population / 2,
#                      labels= continents_population$Continent) +
#   theme(axis.ticks=element_blank(),
#         axis.text.y=element_blank(),
#         axis.text.x=element_text(colour='black'),
#         axis.title=element_blank())
# Get the positions
continents_population_labels <- continents_population %>%
mutate(csum = rev(cumsum(rev(Population))),
pos = Population/2 + lead(csum, 1),
pos = if_else(is.na(pos), Population/2, pos))
ggplot(continents_population, aes(x = "", y = Population, fill = Continent)) +
geom_col(width=1, color="white") +
coord_polar(theta = "y") +
scale_fill_manual(values=af_categorical_colours) +
scale_y_continuous(breaks = continents_population_labels$pos,
labels = continents_population$Label) +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_text(size = 15),
legend.position = "none", # Removes the legend
panel.background = element_rect(fill = "white"))
vec <- c(1,2,3,4)
vec
length(vec)
nrow(vec)
afcolours::af_colours()
afcolours::af_colours(n=3)
vec <- c(1,2,3)
vec[1]
vec[1,]
afcolours::af_colours(colour_format = "rgb")
length(afcolours::af_colours(colour_format = "rgb"))
devtools::load_all()
afcolours::af_colours()
devtools::load_all()
afcolours::af_colours()
devtools::load_all()
afcolours::af_colours()
afcolours::af_colours(n=6)
afcolours::af_colours(n=5)
devtools::load_all()
afcolours::af_colours()
devtools::load_all()
afcolours::af_colours(colour_format = "rgb")
afcolours::af_colours(colour_format = "rgb", n=3)
devtools::load_all()
afcolours::af_colours(colour_format = "rgb", n=3)
afcolours::af_colours(colour_format = "rgb", n=7)
afcolours::af_colours(colour_format = "rgb", n=-1)
afcolours::af_colours(colour_format = "rgb", n=-2)
afcolours::af_colours(colour_format = "rgb", n=-6)
afcolours::af_colours(colour_format = "rgb", n=-7)
devtools::load_all()
afcolours::af_colours(colour_format = "rgb")
afcolours::af_colours(colour_format = "rgb", n=5)
afcolours::af_colours(colour_format = "rgb", n=2)
devtools::load_all()
afcolours::af_colours(colour_format = "rgb", n=2)
afcolours::af_colours(colour_format = "rgb", n=3)
devtools::load_all()
afcolours::af_colours(colour_format = "rgb", n=0)
devtools::document()
devtools::document()
devtools::test()
theme_ipsum()
hrbrthemes::theme_ipsum()
# Load your packages
library(tidyverse)
library(ggplot2)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
mutate(Label = paste(Continent,
paste0("(", round(Population/sum(Population)*100, 2), "%)"),
sep=" "))
View(continents_population)
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
arrange(Population) %>%
mutate(Label = paste(Continent,
paste0("(", round(Population/sum(Population)*100, 2), "%)"),
sep=" "))
View(continents_population)
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
arrange(-Population) %>%
mutate(Label = paste(Continent,
paste0("(", round(Population/sum(Population)*100, 2), "%)"),
sep=" "))
View(continents_population)
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
arrange(-Population) %>%
mutate(Label = paste(Continent,
paste0("(", round(Population/sum(Population)*100, 2), "%)"),
sep=" "))
View(continents_population)
#| echo: false
#| warning: false
# Load your packages
library(tidyverse)
library(ggplot2)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
arrange(-Population) %>%
mutate(Label = paste(Continent,
paste0("(", round(Population/sum(Population)*100, 2), "%)"),
sep=" "))
# Create your chart
pie(continents_population$Population, labels = continents_population$Label,
border="white", col=af_categorical_colours, radius = 1.05)
#| echo: false
#| warning: false
# Load your packages
library(tidyverse)
library(ggplot2)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_continents.csv")
continents_population <- world_population %>%
select(Continent, "2022") %>%
group_by(Continent) %>%
summarise(Population = sum(.data$"2022")) %>%
arrange(-Population) %>%
mutate(Label = paste(Continent,
paste0("(", round(Population/sum(Population)*100, 2), "%)"),
sep=" "))
# Create your chart
pie(continents_population$Population, labels = continents_population$Label,
border="white", col=af_categorical_colours, radius = 1.05, clockwise = TRUE)
devtools::load_all()
devtools::load_all()
devtools::check()
# Load your packages
library(tidyverse)
library(ggplot2)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_in_billions.csv")
top_four_data <- world_population[1:5,] %>%
rename(Country = "Country/Territory") %>%
tidyr::gather(Year, Population, -Country) %>%
arrange(-Population) %>%
mutate(Label = paste(Country,
paste0(round(Population/sum(Population)*100, 2), "%"),
sep=" "))
View(top_four_data)
View(world_population)
View(top_four_data)
View(top_four_data)
# Load your packages
library(tidyverse)
library(ggplot2)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_in_billions.csv")
top_four_data <- world_population[1:5,] %>%
rename(Country = "Country/Territory") %>%
tidyr::gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
arrange(-Population) %>%
mutate(Label = paste(Country,
paste0(round(Population/sum(Population)*100, 2), "%"),
sep=" "))
View(top_four_data)
# Load your packages
library(tidyverse)
library(ggplot2)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_in_billions.csv")
top_four_data <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
arrange(-Population) %>%
mutate(Other = sum(Population),
Label = paste(Country,
paste0(round(Population/sum(Population)*100, 2), "%"),
sep=" "))
View(top_four_data)
top_four_data <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
arrange(-Population) %>%
mutate(Country = replace(Country, Population < Population[5], "Other", Country),
Label = paste(Country,
paste0(round(Population/sum(Population)*100, 2), "%"),
sep=" "))
top_four_data <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
arrange(-Population) %>%
mutate(Country = ifelse(Population < Population[5], "Other", Country),
Label = paste(Country,
paste0(round(Population/sum(Population)*100, 2), "%"),
sep=" "))
top_four_data <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
mutate(Country = ifelse(Population < Population[5], "Other", Country)) %>%
group_by(Country) %>%
summarise()
View(top_four_data)
top_four_data <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
mutate(Country = ifelse(Population < Population[5], "Other", Country)) %>%
group_by(Country) %>%
summarise(Population)
top_four_data <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
mutate(Country = ifelse(Population < Population[5], "Other", Country)) %>%
group_by(Country) %>%
summarise(Population = sum(Population))
top_four_data_2022 <- world_population %>%
rename(Country = "Country/Territory") %>%
gather(Year, Population, -Country) %>%
filter(Year == 2022) %>%
mutate(Country = ifelse(Population < Population[5], "Other", Country)) %>%
group_by(Country) %>%
summarise(Population = sum(Population))
View(top_four_data_2022)
Labels <- paste(top_four_data_2022$Country,
paste0(round(top_four_data_2022$Population
/ sum(top_four_data_2022$Population)
* 100, 2), "%"),
sep=" ")
max(world_population$Year)
devtools::check()
devtools::test()
devtools::test()
devtools::load_all()
use_mit_license()
usethis::use_mit_license()
devtools::check()
usethis::use_news_md()
usethis::use_cran_comments()
devtools::check()
devtools::check()
afcolours::af_colours()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
afcolours::af_colours()
afcolours::af_colours(colour_format = "rgb")
devtools::load_all()
afcolours::af_colours(colour_format = "rgb")
devtools::check()
devtools::check()
devtools::load_all()
afcolours::af_colours()
afcolours::af_colours(colour_format = "rgb")
afcolours::af_colours(type = "duo", colour_format = "rgb")
afcolours::af_colours(palette = "duo", colour_format = "rgb")
afcolours::af_colours(colour_format = "rgb", n=4)
devtools::test()
usethis::use_data_raw()
## code to prepare `DATASET` dataset goes here
palettes <- lst(
categorical = c("#12436D", "#28A197", "#801650", "#F46A25", "#3D3D3D", "#A285D1"),
duo = c("#12436D", "#F46A25"),
focus = c("#12436D", "#BFBFBF"),
sequential = c("#12436D", "#2073BC", "#6BACE6")
)
usethis::use_data(palettes, internal = TRUE, overwrite = TRUE)
load("~/Repos/afcolours/R/sysdata.rda")
devtools::load_all()
afcolours::af_colours()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
usethis::use_tidy_description()
usethis::use_tidy_description()
## code to prepare colour palettes goes here
palette_types <- lst(
categorical = c("#12436D", "#28A197", "#801650", "#F46A25", "#3D3D3D", "#A285D1"),
duo = c("#12436D", "#F46A25"),
focus = c("#12436D", "#BFBFBF"),
sequential = c("#12436D", "#2073BC", "#6BACE6")
)
usethis::use_data(palette_types, internal = TRUE, overwrite = TRUE)
devtools::load_all()
afcolours::af_colours()
devtools::load_all()
afcolours::af_colours()
afcolours::af_colours(colour_format = "rgb")
afcolours::af_colours(colour_format = "rgb", n = 3)
afcolours::af_colours(type = "focus", colour_format = "rgb", n = 3)
devtools::test()
devtools::check()
devtools::check()
devtools::document()
# Load your packages
library(tidyverse)
library(ggplot2)
library(hrbrthemes)
# Load in your colours
af_categorical_colours <- afcolours::af_colours("categorical", colour_format = "hex", n = 6)
# Load in your data
world_population <- read_csv("data/world_population_in_billions.csv")
View(world_population)
top_four_data <- world_population[1:4,] %>%
rename(Country = "Country/Territory") %>%
tidyr::gather(Year, Population, -Country)
View(top_four_data)
top_four_data <- world_population[1:4,]
View(top_four_data)
seq(1990, 2020, by = 10)
top_four_data <- world_population[1:4,] %>%
rename(Country = "Country/Territory") %>%
tidyr::gather(Year, Population, -Country)
str(top_four_data)
str(top_four_data)
top_four_data <- world_population[1:4,] %>%
rename(Country = "Country/Territory") %>%
tidyr::gather(Year, Population, -Country) %>%
mutate(Year = as.numeric(Year))
tidyr::gather(Year, Population, -Country) %>%
top_four_data <- world_population[1:4,] %>%
rename(Country = "Country/Territory") %>%
tidyr::gather(Year, Population, -Country) %>%
mutate(Year = as.numeric(Year))
str(top_four_data)
devtools::check()
usethis::use_release_issue()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
rhub::check_for_cran()
urlchecker::url_check()
urlchecker::url_check()
